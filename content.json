[{"title":"lx_01","date":"2017-06-21T06:21:24.000Z","path":"2017/06/21/lx-01/","text":"** 2017-6-21.关于自己的近况 最近换了一个公司了，以后的Blog更新最多的应该是个人日记了吧。。 毕竟在这也不需要自己跟后端合作一起敲代码了。。。 心里也是诸多感想。。好在经过一周不到的时间。我把 node 和 git 安装好了。。之前用习惯了mac 突然换成win 都有点用不习惯了， 在这我也想简单的说两句关于安装 node 和 git 的建议。。 1.请先安装git 这样对后面检测 node 安装是否正确可以起到作用。 2.安装 node 的时候请注意安装版本。。我现在安装的时候有v6 和 v8 请安装稳定版本。即v6。毕竟我们是使用人员不是开发者。安装v8 的后果是npm -v 报错 找不到cli 什么的。。解决方案就是卸载并重新安装v6 。 后续我将会重新启动我的之前写的一些工程，比如vue的。。 每天都在学习英语和日语。工作语言就是英语ヘ日语。并下载了一个学习日语的app 给自己一个机会。 我要好好学习。。天天向上。 现在搭建的博客也顺利启动了。。后续将会慢慢的添加一些我在lenovo的一些感触吧。。","tags":[{"name":"日记","slug":"日记","permalink":"https://github.com/ping13579/gulp-webpack-sass-hotChange/tags/日记/"}]},{"title":"handlebars","date":"2017-04-13T07:37:05.000Z","path":"2017/04/13/handlebars/","text":"关于引用handlebars 项目中经常使用的是创建.tpl文件。然后在js 里引入等等。。 本次想介绍的是在script中放置模板并调用。但其实方法也是异曲同工的。 12345678910111213141516171819202122232425262728293031&lt;div class=&quot;wrap&quot;&gt;&lt;/div&gt;&lt;!-- 奖品 --&gt;&lt;script id=&quot;tpl_prize&quot; type=&quot;text/x-handlebars-template&quot;&gt; &lt;div class=&quot;track-mark&quot;&gt; &lt;div class=&quot;mark-box prize-box fadeIn&quot;&gt; &lt;span class=&quot;track-shut&quot; id=&quot;track-shut&quot;&gt;&lt;/span&gt; &lt;p class=&quot;box-content&quot;&gt; &lt;img src=&quot;&#123;&#123;imageUrl&#125;&#125;&quot; class=&quot;box-content-img&quot;/&gt; &lt;/p&gt; &lt;span class=&quot;text_span&quot;&gt;&#123;&#123;couponTitle&#125;&#125;&lt;/span&gt; &lt;p class=&quot;trackpage-btn&quot;&gt; &lt;span class=&quot;track-now-user&quot; id=&quot;track-user&quot;&gt;马上使用&lt;/span&gt; &lt;span class=&quot;track-now-shut&quot; id=&quot;track-shut1&quot;&gt;再翻一次&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;/div&gt;&lt;/script&gt;&lt;script src=&quot;http://cdn.ufenqi.com/cms/img/jquery-1.9.1.min-201609.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;http://cdn.ufenqi.com/cms/img/handlebars-201609.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;http://cdn.ufenqi.com/cms/img/handlebars_helpers-201609.js&quot;&gt;&lt;/script&gt;&lt;script&gt; var tpl = $(&quot;#tpl_prize&quot;).html(); var html1 = Handlebars.compile(tpl); var template = html1(&#123; imageUrl: &apos;http://cdn.ufenqi.com/cms/img/top04.jpg&apos;, couponTitle: &apos;快来领奖吧笨蛋&apos; &#125;); $(&quot;.wrap&quot;).append(template);&lt;/script&gt;","tags":[{"name":"js","slug":"js","permalink":"https://github.com/ping13579/gulp-webpack-sass-hotChange/tags/js/"},{"name":"handlebars","slug":"handlebars","permalink":"https://github.com/ping13579/gulp-webpack-sass-hotChange/tags/handlebars/"}]},{"title":"number","date":"2017-04-13T01:57:56.000Z","path":"2017/04/13/number/","text":"调用函数 保留小数点两位数123456789101112function fmoney(s, n)&#123; n = n &gt; 0 &amp;&amp; n &lt;= 20 ? n : 2; s = parseFloat((s + &quot;&quot;).replace(/[^\\d\\.-]/g, &quot;&quot;)).toFixed(n) + &quot;&quot;; var l = s.split(&quot;.&quot;)[0].split(&quot;&quot;).reverse(), r = s.split(&quot;.&quot;)[1]; t = &quot;&quot;; for(i = 0; i &lt; l.length; i ++ ) &#123; t += l[i] + ((i + 1) % 3 == 0 &amp;&amp; (i + 1) != l.length ? &quot;,&quot; : &quot;&quot;); &#125; return t.split(&quot;&quot;).reverse().join(&quot;&quot;) + &quot;.&quot; + r;&#125; 调用方法12var u=fmoney(&apos;33.456788765&apos;,2);console.log(u); 直接用 toFixed 保留小数点两位。。。123var str =89.34567;var w=str.toFixed(2);console.log(w); 个人觉得还是 toFixed 这个方法比较简单。一个函数即可。 时间格式化。。。12345678910111213141516171819202122Date.prototype.format = function(format)&#123; var o = &#123; &quot;M+&quot; : this.getMonth()+1, //month &quot;d+&quot; : this.getDate(), //day &quot;h+&quot; : this.getHours(), //hour &quot;m+&quot; : this.getMinutes(), //minute &quot;s+&quot; : this.getSeconds(), //second &quot;q+&quot; : Math.floor((this.getMonth()+3)/3), //quarter &quot;S&quot; : this.getMilliseconds() //millisecond &#125; if(/(y+)/i.test(format)) &#123; format = format.replace(RegExp.$1, (this.getFullYear()+&quot;&quot;).substr(4 - RegExp.$1.length)); &#125; for(var k in o) &#123; if(new RegExp(&quot;(&quot;+ k +&quot;)&quot;).test(format)) &#123; format = format.replace(RegExp.$1, RegExp.$1.length==1 ? o[k] : (&quot;00&quot;+ o[k]).substr((&quot;&quot;+ o[k]).length)); &#125; &#125; return format;&#125; 使用方法112var now = new Date();var nowStr = now.format(&quot;yyyy-MM-dd hh:mm:ss&quot;); 使用方法2123var testDate = new Date();var testStr = testDate.format(&quot;YYYY年MM月dd日hh小时mm分ss秒&quot;);alert(testStr); 示例：1234alert(new Date().format(&quot;yyyy年MM月dd日&quot;));alert(new Date().format(&quot;MM/dd/yyyy&quot;));alert(new Date().format(&quot;yyyyMMdd&quot;));alert(new Date().format(&quot;yyyy-MM-dd hh:mm:ss&quot;)); 下面是时间选择器插件的官方使用说明: https://demo.mobiscroll.com/v3/javascript/datetime/#demo=minmax&amp;lang=zh https://docs.mobiscroll.com/3-0-0_beta5/javascript/datetime#!opt-max","tags":[{"name":"js","slug":"js","permalink":"https://github.com/ping13579/gulp-webpack-sass-hotChange/tags/js/"}]},{"title":"关于数组","date":"2017-04-12T09:01:48.000Z","path":"2017/04/12/sort/","text":"介绍几种不同种类的数组的去重方法 1.数组按条件排序如下数组 先按照 price 排序。当 price 相等时按照 star 排序12345678var arr = new Array(6); arr[0] = &#123;price: 1,star: 20&#125;; arr[1] = &#123;price: 5,star: 20&#125;; arr[2] = &#123;price: 3,star: 21&#125;; arr[3] = &#123;price: 4,star: 20&#125;; arr[4] = &#123;price: 10,star: 21&#125;; arr[5] = &#123;price: 10,star: 19&#125;; arr[6] = &#123;price: 10,star: 20&#125;; 用的方法比较简单。如下所示： 123456789arr.sort(function(a,b)&#123; if(a.price !== b.price)&#123; return a.price -b.price; &#125;else&#123; return a.star- b.star; &#125;&#125;);console.log(arr); 两个数组去重，生成一个无重复项的数组12345678910111213var arrq=[0,1,2,3,4,5,6,7,8,9,10];var m=[8,1,4,5,6,3,7];for(var u=0;u&lt;arrq.length;u++)&#123; for(var j=0;j&lt;m.length;j++)&#123; if(m[j]==arrq[u])&#123; arrq.splice(u,1); //m.splice(u,1); u--; &#125; &#125;&#125;console.log(arrq);//console.log(m); 两个数组。用哪个数组.splice(u,1) 就是去掉了这个数组跟另个数组的重复项。。 也可以同时去掉两个数组中都有的项。。用indexOf。 项目中的使用1234567891011121314151617181920212223242526272829var hotlist = index.opts.hotlist;var alllist = [];if(!!datas.length)&#123; index.opts.cans = true; if(type ==&apos;hot&apos;)&#123; for(var j=0;j&lt;datas.length;j++)&#123; hotlist[j]=datas[j]; &#125; getData(hotlist); &#125;else if(type ==&apos;all&apos;)&#123; for(var j=0;j&lt;datas.length;j++)&#123; alllist[j]=datas[j]; &#125; for(var u=0;u&lt;hotlist.length;u++)&#123; for(var r=0; r&lt;alllist.length;r++)&#123; if(alllist[r][&apos;id&apos;]==hotlist[u][&apos;id&apos;])&#123; // console.log(alllist[r][&apos;id&apos;] +&apos; 重复id &apos;+ hotlist[u][&apos;id&apos;]); if(u==0)&#123; u=u; &#125;else&#123; u--; &#125; alllist.splice(r,1); &#125; &#125; &#125; &#125;&#125;console.log(alllist); 一个数组的去重123456789101112131415161718192021//双重循环方式var trr=[1,3,2,4,6,2,3,5,3,5];for(var w=0;w&lt;trr.length;w++)&#123; for(var r =w+1 ;r&lt;trr.length;r++)&#123; if(trr[w]==trr[r])&#123; trr.splice(r,1); r--; &#125; &#125;&#125;console.log(trr);//indexOf 方式var trr=[1,3,2,4,6,2,3,5,3,5];var tyy =[];for(var w=0;w&lt;trr.length;w++)&#123; if(tyy.indexOf(trr[w])==-1)&#123; tyy.push(trr[w]); &#125;&#125; 用最新的 es6 Set方法处理12var s = new Set([1, 2, 3, 5, 4, 3, 4]);s;//Set &#123;1, 2, 3, 5, 4&#125; 还有几种单数组去重方法。以上介绍的是我比较习惯用的。更多请参考 单数组去重方法 打乱数组123456var a =[1,2,3,4,5,6,7,8,9,10], sign=1;a.sort(function(a,b)&#123; sign =(Math.random()&gt;0.5)?1:-1;return (a-b)*sign;&#125;);console.log(a); 生成0-99的数组 不用for循环1234var arr1 = Array(100).join(&apos;,&apos;).split(&apos;,&apos;).map(function(item,index)&#123; return index;&#125;);console.log(arr1);","tags":[{"name":"js","slug":"js","permalink":"https://github.com/ping13579/gulp-webpack-sass-hotChange/tags/js/"}]},{"title":"share QQ&sina","date":"2017-04-12T07:17:30.000Z","path":"2017/04/12/share-QQ-sina/","text":"分享到QQ空间和新浪微博的方 以下是我们公司经常用的方法。 如有更合适的方法也请忽略。。 12345678910111213141516171819202122232425262728293031323334&lt;a class=&quot;Share_QQ&quot; style=&quot;text-align:center;&quot;&gt;QQ分享测试&lt;/a&gt;&lt;a class=&quot;Share_sina&quot; style=&quot;text-align:center;&quot;&gt;Sina分享测试&lt;/a&gt;//h5端分享至QQ网页版$(&quot;.Share_QQ&quot;).click(function()&#123; var desc=&apos;&apos;; /*分享理由(风格应模拟用户对话),支持多分享语随机展现（使用|分隔）*/ var title=&apos;&apos;; /*分享标题(可选)*/ var summary=&apos;&apos;; /*分享摘要(可选)*/ var pic=&apos;&apos;;//分享出去后显示的小图片 var shareUrl=&quot;&quot;;//分享出去后点击进入的链接 var href = &apos;http://sns.qzone.qq.com/cgi-bin/qzshare/cgi_qzshare_onekey?url=&apos; +shareUrl + &apos;&amp;title=&apos; + title + &apos;&amp;desc=&apos; + desc + &apos;&amp;summary=&apos; + summary + &apos;&amp;pics=&apos; + pic; window.location.href=href; &#125;)//&lt;script src=&quot;http://qzonestyle.gtimg.cn/qzone/app/qzlike/qzopensl.js#jsdate=20111201&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt; //h5端分享至微博网页版$(&quot;.Share_sina&quot;).click(function()&#123; var title = &apos;&apos;; /*分享标题(可选)*/ var appkey = &apos;&apos;; 这个可自己定义一个。 var pic = &apos;&apos;; //分享出去后显示的小图片 var shareUrl =&quot;&quot;; //分享出去后点击进入的链接 var href = &apos;http://service.weibo.com/share/share.php?url=&apos; + shareUrl + &apos;&amp;title=&apos; + title + &apos;&amp;appkey=&apos; + appkey + &apos;&amp;pic=&apos; + pic; window.location.href=href;&#125;)","tags":[{"name":"js","slug":"js","permalink":"https://github.com/ping13579/gulp-webpack-sass-hotChange/tags/js/"}]},{"title":"vue","date":"2017-04-11T10:39:33.000Z","path":"2017/04/11/vue/","text":"创建一个vue+webpack+sass+mint-ui项目 首先node 和npm 是必备的。此处不多加说明 为了让大家少走弯路可直接去我的github拉取代码 vue-demo 然后安装插件依赖。。 12cd 到项目文件npm install へ ／| /＼7 ∠＿/ / │ ／ ／ │ Z ＿,＜ ／ /`ヽ │ ヽ / 〉 Y ` / / ｲ● ､ ● ⊂⊃ 〈 / () へ | ＼ 〈 ｰ ､_ ィ │ ／ ／ / へ / ﾉ＜| ＼＼ ヽﾉ (／ │／／ 7 |／ ＞―r￣￣`ｰ―＿ 代码神兽、、、 组件运用及sass写法 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162&lt;template&gt; &lt;div class=&quot;hello&quot;&gt; &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt; &lt;h5&gt;&#123;&#123;explain&#125;&#125;&lt;/h5&gt; &lt;h2&gt; -- 说明 -- &lt;/h2&gt; &lt;ul&gt; &lt;li&gt;1、电脑上已安装node 及item。 &lt;/li&gt; &lt;li&gt;2、cd 到打算放置vue 的文件夹下。&lt;/li&gt; &lt;li&gt;3、执行以上命令。npm install 的时候可能会出现卡掉进行不下去。此时可停止安装。执行 npm install -g 命令即可&lt;/li&gt; &lt;li&gt;4、再执行npm run dev即可。&lt;/li&gt; &lt;li&gt;5、打开文件后会出现js文件报错。点击灯泡标识，转换js格式。注：本人用的是webstrom 编辑器。&lt;/li&gt; &lt;/ul&gt; &lt;a :href=&apos;url&apos; class=&apos;clickBtn&apos;&gt;Go Next&lt;/a&gt; &lt;comFooter&gt;&lt;/comFooter&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import comFooter from &apos;../components/footer.vue&apos;;export default &#123; name: &apos;hello&apos;, data () &#123; return &#123; msg: &apos;Welcome to My Vue 项目&apos;, explain: &apos;本项目是根据vue官网建立的，让我们脚踏实地的一步一步学习vue吧。。&apos;, url: &apos;/demoList&apos; &#125; &#125;, components: &#123; comFooter &#125;,&#125;&lt;/script&gt;&lt;style lang=&apos;scss&apos;&gt;h1, h2 &#123; font-weight: normal;&#125;ul &#123; list-style-type: none; padding: 0; width:500px; text-align:left; margin:0 auto; background:#eee; padding:20px 0; li &#123; line-height:30px; margin: 0 20px; &#125;&#125;a &#123; color: #42b983;&#125;.clickBtn&#123; margin-top:30px; display:block; text-decoration: underline;&#125;&lt;/style&gt; 路由处理以下是 router/index.js 内容; 12345678910111213141516171819202122232425262728293031import Vue from &apos;vue&apos;import Router from &apos;vue-router&apos;Vue.use(Router)export default new Router(&#123; mode: &apos;history&apos;, routes: [ &#123; path: &apos;/&apos;, name: &apos;Hello&apos;, component: (resolve) =&gt; &#123; require([&apos;@/views/first.vue&apos;], resolve) &#125; &#125;, &#123; path: &apos;/demoList&apos;, name: &apos;demoList&apos;, component: (resolve) =&gt; &#123; require([&apos;@/views/demo.vue&apos;], resolve) &#125; &#125;, &#123; path: &apos;/demoOne&apos;, name: &apos;demoOne&apos;, component: (resolve) =&gt; &#123; require([&apos;@/views/demoOne.vue&apos;], resolve) &#125; &#125;, &#123; path: &apos;/demoTwo&apos;, name: &apos;demoTwo&apos;, component: (resolve) =&gt; &#123; require([&apos;@/views/demoTwo.vue&apos;], resolve) &#125; &#125; ]&#125;) mint-ui 使用说明1234567891011121314151617181920//安装# Vue 1.xnpm install mint-ui@1 -S# Vue 2.0npm install mint-ui -S// 引入全部组件import Vue from &apos;vue&apos;;import Mint from &apos;mint-ui&apos;;Vue.use(Mint);// 按需引入部分组件import &#123; Cell, Checklist &#125; from &apos;minu-ui&apos;;Vue.component(Cell.name, Cell);Vue.component(Checklist.name, Checklist);、、切勿忘记引入样式import &apos;mint-ui/lib/style.css&apos;;样式引入可在公共地方。本项目在main.js里引入。。每次调用都不用特意再调用。。 vue插件 mint-ui 更多使用案例请参考 mint-ui – 说明 – 1234567891、电脑上已安装node 及item。2、cd 到打算放置vue 的文件夹下。3、执行以上命令。npm install 的时候可能会出现卡掉进行不下去。此时可停止安装。执行 npm install -g 命令即可4、再执行npm run dev即可。5、打开文件后会出现js文件报错。点击灯泡标识，转换js格式。注：本人用的是webstrom 编辑器。6、下次再打开工程报错如： &apos;process-nextick-args&apos; 此时重新 npm install node 即可（此坑研究了好久。终于解决。心好累啊。）。7、本工程用的 webpack+vue+sass 搭建。项目是我自己根据网上资料自己搭建的 里面都是一些案例。 其中用到了路由，组件，vue基础语句等等。。8、工程启动时间比较， 需要三四分钟才能在浏览器看到效果（这是一个bug）。。启动完成后能实时刷新不必担心后续的延迟效果。","tags":[{"name":"vue","slug":"vue","permalink":"https://github.com/ping13579/gulp-webpack-sass-hotChange/tags/vue/"},{"name":"webpack","slug":"webpack","permalink":"https://github.com/ping13579/gulp-webpack-sass-hotChange/tags/webpack/"},{"name":"sass","slug":"sass","permalink":"https://github.com/ping13579/gulp-webpack-sass-hotChange/tags/sass/"},{"name":"mint-ui","slug":"mint-ui","permalink":"https://github.com/ping13579/gulp-webpack-sass-hotChange/tags/mint-ui/"}]},{"title":"command","date":"2017-03-26T11:43:10.000Z","path":"2017/03/26/command/","text":"启动 nginx打开items 输入一下命令 1sudo nginx 然后提示输入电脑管理密码即可。。 苹果电脑下命令行显示分支名称 找到 /etc/bashrc（我的电脑是mac。其他的是不是这个路径就有待各位验证了，呵呵！！）用编辑器打开。将以下代码复制进去即可。 12345678910111213141516171819202122232425262728293031323334## Parses out the branch name from .git/HEAD:find_git_branch () &#123; local dir=. head until [ &quot;$dir&quot; -ef / ]; do if [ -f &quot;$dir/.git/HEAD&quot; ]; then head=$(&lt; &quot;$dir/.git/HEAD&quot;) if [[ $head = ref:\\ refs/heads/* ]]; then git_branch=&quot; → $&#123;head#*/*/&#125;&quot; elif [[ $head != &apos;&apos; ]]; then git_branch=&quot; → (detached)&quot; else git_branch=&quot; → (unknow)&quot; fi return fi dir=&quot;../$dir&quot; done git_branch=&apos;’&#125;PROMPT_COMMAND=&quot;find_git_branch; $PROMPT_COMMAND&quot;# Here is bash color codes you can use black=$&apos;\\[\\e[1;30m\\]&apos; red=$&apos;\\[\\e[1;31m\\]&apos; green=$&apos;\\[\\e[1;32m\\]&apos; yellow=$&apos;\\[\\e[1;33m\\]&apos; blue=$&apos;\\[\\e[1;34m\\]&apos;magenta=$&apos;\\[\\e[1;35m\\]&apos; cyan=$&apos;\\[\\e[1;36m\\]&apos; white=$&apos;\\[\\e[1;37m\\]&apos; normal=$&apos;\\[\\e[m\\]&apos;PS1=&quot;$white[$magenta\\u$white@$green\\h$white:$cyan\\w$yellow\\$git_branch$white]\\$ $normal” 此命令行可查看项目在想要执行的项目里面输入以下命令即可1wc -l $(find . -name &quot;*.java&quot; -o -name &quot;*.xml&quot; -o -name &quot;*.properties&quot; -o -name &quot;*.sh”) 创建文件12mkdir +文件夹名字touch +文件名字 删除文件1rm -fr 删除文件，问价夹 -f强制删除 -r是递归","tags":[{"name":"item","slug":"item","permalink":"https://github.com/ping13579/gulp-webpack-sass-hotChange/tags/item/"},{"name":"command line","slug":"command-line","permalink":"https://github.com/ping13579/gulp-webpack-sass-hotChange/tags/command-line/"}]},{"title":"module","date":"2017-03-26T11:30:34.000Z","path":"2017/03/26/module/","text":"** 对于依赖的模块，AMD 是提前执行，CMD 是延迟执行。不过 RequireJS 从 2.0 开始， 也改成可以延迟执行（根据写法不同，处理方式不同）。CMD 推崇 as lazy as possible. ** CMD 推崇依赖就近，AMD 推崇依赖前置。看代码： // CMD 12345678define(function(require, exports, module) &#123;var a = require(&apos;./a&apos;)sa.doSomething()// 此处略去 100 行var b = require(&apos;./b&apos;) // 依赖可以就近书写b.doSomething()// ...&#125;) // AMD 默认推荐的是123456define([&apos;./a&apos;, &apos;./b&apos;], function(a, b) &#123; // 依赖必须一开始就写好a.doSomething()// 此处略去 100 行b.doSomething()...&#125;)","tags":[{"name":"js","slug":"js","permalink":"https://github.com/ping13579/gulp-webpack-sass-hotChange/tags/js/"}]},{"title":"添加分割线 after 伪元素的应用","date":"2017-03-24T10:26:30.000Z","path":"2017/03/24/after/","text":"对于添加分割线的方法 此处有一种无需添加标签的方法 添加并删除多余的 如下 123456789.nav li:after &#123; content:&quot;&quot;; width:1px; height:10px; background-image:linear-gradient(to bottom,rgba(0,0,0,0),rgba(0,0,0,0.3),rgba(0,0,0,0)); position: absolute; top:20px; right:0px;&#125; 删除第一项或者最后一项导航分隔线 12345678910.nav li:first-child:after &#123; content:&apos;&apos;; width:0px; height:0px;&#125;.nav li:last-child:after &#123; content:&apos;&apos;; width:0px; height:0px;&#125;","tags":[{"name":"css","slug":"css","permalink":"https://github.com/ping13579/gulp-webpack-sass-hotChange/tags/css/"}]},{"title":"version","date":"2017-03-24T09:36:32.000Z","path":"2017/03/24/version/","text":"h5 与app 的交互越来越频繁。很多时候需要做一些兼容 那么问题来了。。怎么做app 版本兼容判断呢 app 每次发版都会有个版本号。那么就需要我们h5去获得这个版本号，每个公司获得的方法不同 我们公司呢是用 当然首要条件需要客户端将版本信息传给我们，前端处理如下： 1234567function getUrlParam(name) &#123; var reg = new RegExp(&quot;(^|&amp;)&quot; + name + &quot;=([^&amp;]*)(&amp;|$)&quot;); var r = window.location.search.substr(1).match(reg); if (r != null) return decodeURI(r[2]); return null;&#125;var version = getUrlParam(&apos;version&apos;)的方法获取 1234567891011 var version1=&quot;4.4.0&quot;; //先定义好一个固定版本，一般是线上不兼容新加功能的版本 var version2= version; //这个就是获取的版本号， version1 = version1.split(&quot;.&quot;); version2 = version2.split(&quot;.&quot;); var num1=version1[0]*100+version1[1]*10+version1[2]*1; var num2=version2[0]*100+version2[1]*10+version2[2]*1; if(num1&gt;num2)&#123;// alert(&quot;版本一大&quot;) &#125;else&#123;// alert(&quot;版本二大&quot;) &#125; 后面的事情就是你们的事情了。。哈哈。。","tags":[{"name":"js","slug":"js","permalink":"https://github.com/ping13579/gulp-webpack-sass-hotChange/tags/js/"},{"name":"version","slug":"version","permalink":"https://github.com/ping13579/gulp-webpack-sass-hotChange/tags/version/"}]},{"title":"h5打开app方法","date":"2017-03-24T09:10:13.000Z","path":"2017/03/24/h5Toapp/","text":"本章讲述的是如何通过h5 页面打开app 或者进入app 下载页面的一个通用js 采用动态添加蒙罩层，css 也采用内联样式，通过判断各种环境做出不同操作。 因为QQ内置浏览器不能打开第三方应用,QQ浏览器则可以。js 里有判断出手机QQ内置浏览器， 方法是我经过几款手机的navigator.userAgent对比最新研制出来的。也不知道是不是适用于所有机型。 如有看到不适用机型烦请留言告知。不胜感谢！！ 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970var app_down=&#123; init:function(click_ele)&#123; //点击事件、、、 $(click_ele).on(&quot;click&quot;,function() &#123; var html =&quot;&lt;div class=&apos;clickBTnToApp&apos; style=&apos;position:fixed;top:0;z-index:99999;background-color: #1b2728;filter: alpha(opacity=80);opacity: .8;height:100%;width:100%;left:0;right:0;&apos;&gt;&quot; + &quot;&lt;img src=&apos;http://cdn.ufenqi.com/cms/img/open_notice.png&apos; style=&apos;width: 60%;margin-top: 10%;text-align: right;margin-left: 32%;&apos;&gt;&quot; + &quot;&lt;/div&gt;&quot;; //判断环境。在微信中显示遮罩层。浏览器中则直接打开或者下载app if(isWeixin())&#123; $(&apos;body&apos;).append(html); //微信中也不能直接打开所以直接引导进去浏览器打开 &#125;else&#123; app_down.open(html); &#125; &#125;); //判断微信环境、、、 function isWeixin() &#123; var ua = navigator.userAgent.toLowerCase(); return (ua.match(/MicroMessenger/i) == &quot;micromessenger&quot;); &#125; &#125;, getUrlParam:function (name) &#123; var reg = new RegExp(&quot;(^|&amp;)&quot; + name + &quot;=([^&amp;]*)(&amp;|$)&quot;); var r = window.location.search.substr(1).match(reg); if (r != null) return decodeURI(r[2]); return null; &#125;, goTo:function()&#123; var url=&apos;&apos;; if(app_down.getUrlParam(&apos;t&apos;)==&apos;POST&apos; &amp;&amp; app_down.getUrlParam(&apos;code&apos;)!==&apos;&apos;)&#123; var postCode = app_down.getUrlParam(&apos;code&apos;); //alert(postCode); url= &apos;&apos;; //进入指定页面的路径 &#125;else&#123; url=&apos;&apos; //没有指定页面则进入app 的主页 &#125; return url; &#125;, open:function(txt)&#123; var ua = navigator.userAgent; var Ua = navigator.userAgent.toLowerCase().toString(); if(ua.match(/iphone|ipad/i) != null)&#123; if(Ua.indexOf(&apos;safari&apos;)== -1)&#123; // 判断是否是ios 手机QQ 内置浏览器 是的话进行引导去其他路径打开 $(&apos;body&apos;).append(txt); &#125;else&#123; location.href = app_down.goTo(); setTimeout(function()&#123; location.href = &apos;&apos;; //ios 的下载地址 &#125;,2000); &#125; return false; &#125;else if(ua.match(/android/i) != null)&#123; var url = app_down.goTo(); //alert(url); if(Ua.indexOf(&apos;mobile safari&apos;)== -1)&#123; 判断是否安卓 手机QQ内置浏览器 是的话进行引导去其他路径打开 $(&apos;body&apos;).append(txt); &#125;else&#123; var ifr = document.createElement(&quot;iframe&quot;); document.body.appendChild(ifr); ifr.setAttribute(&apos;src&apos;, url); ifr.setAttribute(&apos;style&apos;, &apos;display:none&apos;); setTimeout(function()&#123; location.href = &apos;&apos;;//安卓下载包地址 &#125;,2000); &#125; return false; &#125; &#125;&#125;; 关于调用方法1234&lt;script src=&quot;../common/app_down.js&quot;&gt;&lt;/script&gt;&lt;script&gt; app_down.init($(&apos;.clickBtn&apos;))&lt;/script&gt; 不同环境有不同的引入方式。。可自行更改","tags":[{"name":"css","slug":"css","permalink":"https://github.com/ping13579/gulp-webpack-sass-hotChange/tags/css/"},{"name":"js","slug":"js","permalink":"https://github.com/ping13579/gulp-webpack-sass-hotChange/tags/js/"},{"name":"app","slug":"app","permalink":"https://github.com/ping13579/gulp-webpack-sass-hotChange/tags/app/"},{"name":"封装调用","slug":"封装调用","permalink":"https://github.com/ping13579/gulp-webpack-sass-hotChange/tags/封装调用/"}]},{"title":"fis3+node","date":"2017-03-24T08:34:37.000Z","path":"2017/03/24/fis3/","text":"首先安装 node 和npm 详细过程参考官网 nodejs.cn 再安装fis3 fis3 安装详情 请点击这里 启动工程 123fis3 releasefis3 server start 实时监听 1fis3 release -wL 更多命令操作及配置 请参考官网 请注意： 与fis3 一起使用的不能是node 最新版本 应该是node 版本 v4.2.1 如node 安装的最近版本需要制定运行版本 不是这个版本会报错 翻译过来就是 fis3 不是命令行啥的。 1nvm install v4.2.1 fis3+node 项目其他配置 请参考我的个人github网站项目 fis3-node-demo 项目","tags":[{"name":"fis3","slug":"fis3","permalink":"https://github.com/ping13579/gulp-webpack-sass-hotChange/tags/fis3/"},{"name":"node","slug":"node","permalink":"https://github.com/ping13579/gulp-webpack-sass-hotChange/tags/node/"}]},{"title":"快速构建hexo个人博客","date":"2017-03-14T16:00:00.000Z","path":"2017/03/15/introduce/","text":"此说明建立在Node和Git都安装好的基础上,首先创建一个文件夹,如Blog,用户存放hexo的配置文件,然后进入Blog里安装Hexo。 执行如下命令安装Hexo：1sudo npm install -g hexo 初始化然后，执行init命令初始化hexo,命令：1hexo init 好啦，至此，全部安装工作已经完成！Blog就是你的博客根目录，所有的操作都在里面进行。 生成静态页面 1hexo generate（hexo g也可以） 本地启动启动本地服务，进行文章预览调试，命令： 1hexo server 浏览器输入http://localhost:4000 配置Github建立Repository建立与你用户名对应的仓库，仓库名必须为【your_user_name.github.io】，固定写法建立关联， 现在我们需要_config.yml文件，来建立关联，命令： 打开工程找到_config.yml文件， 翻到最下面，改成我这样子的 1234deploy: type: git repo: https://github.com/ping13579/ping13579.github.io.git branch: master 然后执行命令： 1npm install hexo-deployer-git --save 然后，执行配置命令： 1hexo deploy 然后再浏览器中输入 https://ping13579.github.io/ 就行了，我的github的账户叫ping13579,把这个改成你github的账户名就行了 部署步骤 即更新步骤 每次部署的步骤，可按以下三步来进行。 123hexo clean # 每次刷新更改的时候最好执行这步，有的时候缓存比较厉害。。很难刷新过来。hexo generatehexo deploy 也可使用下面 hexo g 是 hexo generate 的缩写 hexo d 是 hexo deploy 的缩写 一些常用命令： 12345678910111213hexo new&quot;postName&quot; #新建文章hexo new page&quot;pageName&quot; #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）hexo deploy #将.deploy目录部署到GitHubhexo help # 查看帮助hexo version #查看Hexo的版本 添加新文章的方法hexo new’xxx’之后找到source文件件。在里面找到对应的 xxx.md文件md文件编辑方法 请参考 Cmd Markdown 编辑阅读器。下面就开启你的个人博客之旅吧。。 头像设置方法下了几个版本的主题 landscape next pacman yilia 发现有几个版本都有头像问题。愚钝的我开始在根目录下各种更改_config.yml文件配置，但最后发现应该在各个主题的_config.yml修改配置，本人也是够愚钝的。希望大家不要跟我一样哦。经过各种版本的比较。发现。。yilia主题最好用了。。板式也是最符合心意的。。分页。。上下页导航，评论区。等等。大家也可以各种比较一下 首页文章显示几行。隐藏多余内容用1&lt;!-- more --&gt; 这个标签写在每个md文件中。。相当于分割作用。不是写在配置文件中哦。。好好干。。看好你哦。！！ 出现tag 标签12345678---title: 快速构建hexo个人博客date: 2017-3-15categories:tags: - js - hexo技巧--- 即在每篇文章的title下面添加tags字段并定义标签内容。如上所示即可 大牛博客网址http://litten.me/2014/08/31/hexo-theme-yilia/ https://jayzangwill.github.io/blog/2017/03/01","tags":[{"name":"js","slug":"js","permalink":"https://github.com/ping13579/gulp-webpack-sass-hotChange/tags/js/"},{"name":"hexo技巧","slug":"hexo技巧","permalink":"https://github.com/ping13579/gulp-webpack-sass-hotChange/tags/hexo技巧/"}]},{"title":"Hello World","date":"2017-03-14T16:00:00.000Z","path":"2017/03/15/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[{"name":"js","slug":"js","permalink":"https://github.com/ping13579/gulp-webpack-sass-hotChange/tags/js/"},{"name":"hexo技巧","slug":"hexo技巧","permalink":"https://github.com/ping13579/gulp-webpack-sass-hotChange/tags/hexo技巧/"}]},{"title":"git操作技巧及.idea 文件删除方法","date":"2017-03-14T07:58:31.000Z","path":"2017/03/14/idea/","text":"如何删除.idea文件场景描述idea，webstorm 大家现在都在用。但有个共同点会生成一个.idea文件夹。每次提交更改都会自动生成或者更改其中的破文件，很是心烦，之前不管怎么删下次提交都会生成，后来终于发现了删除后不再生成的秘密。。 删除法第一步、在工程的根目录下建立一个.gitignore ..这个文件的放置地方很重要，放在其他地方都没有，之前删不掉就是因为路径放错了， 如果在git push 之前第一步做好了那第二步也就不需要了，，我们现在说的是线上已经有了.idea文件夹 第二步、删除.idea 文件夹，有两种方法，1、线上git仓库直接删除，不知道的可以百度，2、git pull 拉取线上代码本地删除。用rm -rf 删除 第三步、将 .gitignore文件提交到远程。自此完成删除工作。 注：如有不成功可联系我。暂未开通评论功能，敬请等待。。 删除被锁状态1$ rm -rf .git/index.lock 获取其他分支上提交的commit1git cherry-pick 获取自己想要的comnit tag 退出编辑 先按esc 键 再按shift + ZZ 即可删除远程分支1git push origin :分支名","tags":[{"name":"js","slug":"js","permalink":"https://github.com/ping13579/gulp-webpack-sass-hotChange/tags/js/"},{"name":"git技巧","slug":"git技巧","permalink":"https://github.com/ping13579/gulp-webpack-sass-hotChange/tags/git技巧/"}]},{"title":"关于git 使用的若干个坑","date":"2017-03-13T09:06:27.000Z","path":"2017/03/13/second-edit/","text":"场景描述有git个人账号，想把本地工程推到github，前面一切顺利到最后git push 就一直ERROR: Permission to XXX.git denied to aaa.这个问题我研究了好久，，我在.ssh 文件夹下特意了删除跟aaa账号有关的文件但还是报错，终于有一天我在一个外国的网站上找到答案了，原来是跟我冲突的账号一直保有登陆记录，我们需要清除登陆记录就行 解决方法只需四部第一、打开搜索功能查找 Keychain Access.app 。第二、点击所有项目。第三、在搜索栏查找git，将所有搜索出来的项目都删掉， 。第四、将项目重现git push 上去。成功。*跳过的小坑。 有些项目不能一下全部删掉。。需要你慢慢研究删除方法，，我当时在密码和秘钥那找到跟我冲突的账号一顿删，最后成功删除。 git push 的时候注意事项，之前选择的是a 仓库，git push 失败，出现上面的那个问题，等你解决好成功后你想推到b 仓库地址，你会发现，你其实还是推到了a仓库地址， 人家会保留你第一次的地址，怎么处理， 需要取消第一次的git init一步搞定。。rm -rf .git 删除之前的.git 文件，重新git init 一下就OK了。。","tags":[{"name":"js","slug":"js","permalink":"https://github.com/ping13579/gulp-webpack-sass-hotChange/tags/js/"},{"name":"git技巧","slug":"git技巧","permalink":"https://github.com/ping13579/gulp-webpack-sass-hotChange/tags/git技巧/"}]},{"title":"first edit","date":"2017-03-13T08:10:09.000Z","path":"2017/03/13/first-edit/","text":"hello everyOne 欢迎来到我的个人博客，后续将不断添加这几年来作为前端踩过的坑。流过泪的血泪史。欢迎大家拍砖指正。谢谢！！ 个人简介1989年生，2013年毕业于江西师范大学。 现在就职于北京和创未来网络科技有限公司(优分期)， 勤奋踏实、工作负责、爱学习、喜爱研究最新技术。 公司常用技术 fis3+node+sass 自己也有研究 gulp+webpack 并提交到个人gitHub gulp+webpack+sass+hotchange项目。 前段时间也有研究 canvas基本绘制方法 及canvas制作的倒计时 2017.04 研究项目vue vue+webpack+sass+mint-ui 有关介绍可参考我的 vue 文章 经过几天的研究。终于这个博客折腾到了自己比较满意的地步。其中几个关键的设置我有在‘快速构建hexo个人博客’这篇文章中提到。 路过的朋友有问题可以在下面评论区提出问题。我会尽我可能的协助解决。。呵呵。 暂写这么多。。后续添加、、","tags":[{"name":"个人简介","slug":"个人简介","permalink":"https://github.com/ping13579/gulp-webpack-sass-hotChange/tags/个人简介/"}]}]